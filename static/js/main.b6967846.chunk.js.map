{"version":3,"sources":["components/Counter.jsx","redux/actions/counter.js","containers/Counter.js","components/SetCount.jsx","containers/SetCounter.js","redux/actions/setCounter.js","components/App.jsx","redux/reducers/counter.js","redux/reducers/setCounter.js","redux/reducers/index.js","index.js","redux/store.js"],"names":["Counter","props","dispaly","count","incClick","resetClick","isMax","countMax","incDisable","resetDisable","className","disabled","onClick","incDis","type","incActive","resetDis","inc","payload","CounterContainer","a","isDis","reset","countStart","resetActive","this","React","Component","connect","state","counter","setCounter","maxCounter","startCounter","counterIncDisable","counterResetDisable","startCount","SetCount","error","err","onChange","getMaxCounter","value","getStartCounter","setDisable","setStartCounter","SetCountContainer","startValue","Number","target","maxCount","maxValue","setDis","setActive","counterSetDisable","App","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"4TAoCeA,G,MAjCC,SAACC,GAAW,IAGtBC,EAFGC,EAAyCF,EAAzCE,MAAOC,EAAkCH,EAAlCG,SAAUC,EAAwBJ,EAAxBI,WAClBC,EAD0CL,EAAZM,WACTJ,EAAQ,MAAQ,GAO3C,OAJED,EADEC,GAAS,GAAKF,EAAMO,YAAcP,EAAMQ,aAChC,yBAAKC,UAAS,iBAAoB,+BAElC,yBAAKA,UAAS,4CAAuCJ,IAAUH,GAGzE,yBAAKO,UAAU,kBACb,6BACGR,GAGH,yBAAKQ,UAAU,eACb,4BACEA,UAAS,mBACTC,SAAUV,EAAMO,WAChBI,QAASR,GAHX,OAMA,4BACEM,UAAS,qBACTC,SAAUV,EAAMQ,aAChBG,QAASP,GAHX,aCzBKQ,EAAS,iBAAO,CAACC,KAAM,gBACvBC,EAAY,iBAAO,CAACD,KAAM,eAC1BE,EAAW,iBAAO,CAACF,KAAM,kBAGzBG,EAAM,SAACA,GAAD,MAAU,CAACH,KAAM,MAAOI,QAASD,ICA9CE,E,2MAEJf,S,sBAAW,sBAAAgB,EAAA,2DACL,EAAKnB,MAAME,MAAQ,EAAKF,MAAMM,UADzB,gCAED,EAAKN,MAAMgB,IAAI,EAAKhB,MAAME,MAAQ,GAFjC,OAIT,EAAKkB,QAJI,2C,EAOXhB,W,sBAAa,sBAAAe,EAAA,sEACL,EAAKnB,MAAMqB,MAAM,EAAKrB,MAAMsB,YADvB,OAEX,EAAKF,QAFM,2C,EAKbA,MAAQ,WACF,EAAKpB,MAAME,MAAQ,EAAKF,MAAMM,SAAW,GAC3C,EAAKN,MAAMY,SAET,EAAKZ,MAAME,MAAQ,EAAKF,MAAMM,UAChC,EAAKN,MAAMc,YAET,EAAKd,MAAME,MAAQ,EAAKF,MAAMsB,YAChC,EAAKtB,MAAMuB,cAET,EAAKvB,MAAME,MAAQ,EAAKF,MAAMsB,WAAa,GAC7C,EAAKtB,MAAMe,Y,wEAKb,OAAO,kBAAC,EAAD,CACLZ,SAAUqB,KAAKrB,SACfC,WAAYoB,KAAKpB,WACjBF,MAAOsB,KAAKxB,MAAME,MAClBI,SAAUkB,KAAKxB,MAAMM,SACrBC,WAAYiB,KAAKxB,MAAMO,WACvBC,aAAcgB,KAAKxB,MAAMQ,mB,GApCAiB,IAAMC,WAiDtBC,eARS,SAACC,GAAD,MAAY,CAClC1B,MAAO0B,EAAMC,QAAQ3B,MACrBI,SAAUsB,EAAME,WAAWC,WAC3BT,WAAYM,EAAME,WAAWE,aAC7BzB,WAAYqB,EAAMC,QAAQI,kBAC1BzB,aAAcoB,EAAMC,QAAQK,uBAK5B,CAACtB,SAAQE,YAAWC,WAAUQ,YDrDL,iBAAO,CAACV,KAAM,iBCqDIG,MAAKK,MDpD7B,SAACc,GAAD,MAAiB,CAACtB,KAAM,QAASI,QAASkB,KCkDhDR,CAGdT,GC7BckB,G,MAzBE,SAACpC,GAChB,IAAMqC,EAAQrC,EAAMsC,IAAM,QAAU,GACpC,OACE,yBAAK7B,UAAU,cACb,yBAAKA,UAAU,aACb,6BACE,yBAAKA,UAAU,cAAf,OACA,yBAAKA,UAAU,cAAf,UAEF,yBAAKA,UAAU,eACb,6BACE,2BAAOA,UAAW4B,EAAOE,SAAUvC,EAAMwC,cAAeC,MAAOzC,EAAM+B,WAAYlB,KAAK,YAExF,yBAAKJ,UAAU,sBACb,2BAAOA,UAAW4B,EAAOE,SAAUvC,EAAM0C,gBAAiBD,MAAOzC,EAAMgC,aAAcnB,KAAK,cAIhG,yBAAKJ,UAAU,yBACb,4BAAQC,SAAUV,EAAM2C,WAAYhC,QAASX,EAAM4C,iBAAnD,WChBFC,E,YAEJ,WAAY7C,GAAQ,IAAD,8BACjB,4CAAMA,KAMR0C,gBAPmB,uCAOD,WAAOP,GAAP,SAAAhB,EAAA,6DAChB,EAAK2B,WAAaC,OAAOZ,EAAWa,OAAOP,OAD3B,SAEV,EAAKzC,MAAMmC,WAAW,EAAKW,YAFjB,OAGhB,EAAK1B,QAHW,2CAPC,wDAYnBoB,cAZmB,uCAYH,WAAOS,GAAP,SAAA9B,EAAA,6DACd,EAAK+B,SAAWH,OAAOE,EAASD,OAAOP,OADzB,SAER,EAAKzC,MAAMiD,SAAS,EAAKC,UAFjB,OAGd,EAAK9B,QAHS,2CAZG,wDAkBnBwB,gBAAkB,WAChB,EAAK5C,MAAMgB,IAAI,EAAK8B,YACpB,EAAK1B,QACL,EAAKpB,MAAMc,aArBM,EAwBnBM,MAxBmB,sBAwBX,sBAAAD,EAAA,yDACF,EAAK2B,aAAe,EAAKI,SADvB,uBAEJ,EAAKb,OAAQ,EAFT,SAGE,EAAKrC,MAAMmD,SAHb,wCAMF,EAAKnD,MAAMgC,eAAiB,EAAKc,YAAc,EAAK9C,MAAM+B,aAAe,EAAKmB,UAChF,EAAKb,OAAQ,EACb,EAAKrC,MAAMoD,YACX,EAAKpD,MAAMY,SACX,EAAKZ,MAAMe,YAEX,EAAKf,MAAMmD,SAZP,2CAtBN,EAAKD,SAAW,EAChB,EAAKJ,WAAa,EAClB,EAAKT,OAAQ,EAJI,E,sEAyCjB,OAAO,kBAAC,EAAD,CACLK,gBAAiBlB,KAAKkB,gBACtBF,cAAehB,KAAKgB,cACpBI,gBAAiBpB,KAAKoB,gBACtBb,WAAYP,KAAKxB,MAAM+B,WACvBC,aAAcR,KAAKxB,MAAMgC,aACzBW,WAAYnB,KAAKxB,MAAM2C,WACvBL,IAAKd,KAAKa,Y,GAlDgBX,aA6DjBC,eANS,SAACC,GAAD,MAAY,CAClCG,WAAYH,EAAME,WAAWC,WAC7BC,aAAcJ,EAAME,WAAWE,aAC/BW,WAAYf,EAAME,WAAWuB,qBAK7B,CAACJ,SCnEqB,SAACA,GAAD,MAAe,CAACpC,KAAM,YAAaI,QAASgC,IDmEvDd,WClEa,SAACA,GAAD,MAAiB,CAACtB,KAAM,cAAeI,QAASkB,IDkEjDgB,OCrEH,iBAAO,CAACtC,KAAM,gBDqEHuC,UCpER,iBAAO,CAACvC,KAAM,eDoEKG,MAAKJ,SAAQE,YAAWC,YAFrDY,CAGdkB,GEpDcS,MAbf,WACE,OACE,yBAAK7C,UAAU,OACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,gBACb,kBAAC,EAAD,S,cCZF8C,EAAe,CACnBrD,MAAO,KACP+B,mBAAmB,EACnBC,qBAAqB,GCHjBqB,EAAe,CACnBxB,WAAY,KACZC,aAAc,KACdqB,mBAAmB,GCCNG,cAAgB,CAC7B3B,QFCa,WAAmC,IAAlCD,EAAiC,uDAAzB2B,EAAcE,EAAW,uCAE/C,OAAQA,EAAO5C,MACb,IAAK,MACH,OAAO,eACFe,EADL,CAEE1B,MAAOuD,EAAOxC,UAElB,IAAK,cACH,OAAO,eACFW,EADL,CAEEK,mBAAmB,IAEvB,IAAK,aACH,OAAO,eACFL,EADL,CAEEK,mBAAmB,IAEvB,IAAK,gBACH,OAAO,eACFL,EADL,CAEEM,qBAAqB,IAEzB,IAAK,eACH,OAAO,eACFN,EADL,CAEEM,qBAAqB,IAEzB,IAAK,QACH,OAAO,eACFN,EADL,CAEE1B,MAAOuD,EAAOxC,UAElB,QACE,OAAOW,IElCXE,WDAa,WAAmC,IAAlCF,EAAiC,uDAAzB2B,EAAcE,EAAW,uCAE/C,OAAQA,EAAO5C,MAEb,IAAK,YACH,OAAO,eACFe,EADL,CAEEG,WAAY0B,EAAOxC,UAEvB,IAAK,cACH,OAAO,eACFW,EADL,CAEEI,aAAcyB,EAAOxC,UAEzB,IAAK,aACH,OAAO,eACFW,EADL,CAEEyB,mBAAmB,IAEvB,IAAK,cACH,OAAO,eACFzB,EADL,CAEEyB,mBAAmB,IAEvB,QACE,OAAOzB,MEzBP8B,ECDUC,YAAYC,GDI5BC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEAK,SAASC,eAAe,W","file":"static/js/main.b6967846.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../scss/Counter.scss'\r\n\r\nconst Counter = (props) => {\r\n  const {count, incClick, resetClick, countMax} = props;\r\n  const isMax = countMax === count ? \"red\" : '';\r\n  let dispaly;\r\n  if (count < -1 || props.incDisable && props.resetDisable){\r\n    dispaly = <div className={`counter-count`}>{'enter value and press \"SET\"'}</div>\r\n  }else{\r\n    dispaly = <div className={`counter-count counter-count--size ${isMax}`}>{count}</div>\r\n  }\r\n  return (\r\n    <div className='counter__inner'>\r\n      <div>\r\n        {dispaly}\r\n      </div>\r\n\r\n      <div className='counter-btn'>\r\n        <button\r\n          className={`counter-btn__inc`}\r\n          disabled={props.incDisable}\r\n          onClick={incClick}>\r\n          INC\r\n        </button>\r\n        <button\r\n          className={`counter-btn__reset`}\r\n          disabled={props.resetDisable}\r\n          onClick={resetClick}>\r\n          RESET\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;","export const incDis = () => ({type: 'INC_DISABLE'});\r\nexport const incActive = () => ({type: 'INC_ACTIVE'});\r\nexport const resetDis = () => ({type: 'RESET_DISABLE'});\r\nexport const resetActive = () => ({type: 'RESET_ACTIVE'});\r\nexport const reset = (startCount) => ({type: 'RESET', payload: startCount});\r\nexport const inc = (inc) => ({type: 'INC', payload: inc});\r\n","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Counter from '../components/Counter'\r\nimport {incDis, incActive, resetDis, resetActive, inc, reset} from '../redux/actions/counter'\r\n\r\nclass CounterContainer extends React.Component {\r\n\r\n  incClick = async () => {\r\n    if (this.props.count < this.props.countMax) {\r\n      await this.props.inc(this.props.count + 1)\r\n    }\r\n    this.isDis();\r\n  };\r\n\r\n  resetClick = async () => {\r\n    await this.props.reset(this.props.countStart);\r\n    this.isDis();\r\n  };\r\n\r\n  isDis = () => {\r\n    if (this.props.count > this.props.countMax - 1) {\r\n      this.props.incDis()\r\n    }\r\n    if (this.props.count < this.props.countMax) {\r\n      this.props.incActive()\r\n    }\r\n    if (this.props.count > this.props.countStart) {\r\n      this.props.resetActive()\r\n    }\r\n    if (this.props.count < this.props.countStart + 1) {\r\n      this.props.resetDis()\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <Counter\r\n      incClick={this.incClick}\r\n      resetClick={this.resetClick}\r\n      count={this.props.count}\r\n      countMax={this.props.countMax}\r\n      incDisable={this.props.incDisable}\r\n      resetDisable={this.props.resetDisable}\r\n    />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  count: state.counter.count,\r\n  countMax: state.setCounter.maxCounter,\r\n  countStart: state.setCounter.startCounter,\r\n  incDisable: state.counter.counterIncDisable,\r\n  resetDisable: state.counter.counterResetDisable\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {incDis, incActive, resetDis, resetActive, inc, reset})\r\n(CounterContainer)","import React from 'react';\r\nimport '../scss/SetCounter.scss'\r\n\r\nconst SetCount = (props) => {\r\n  const error = props.err ? 'error' : ''\r\n  return (\r\n    <div className='set__inner'>\r\n      <div className='set__info'>\r\n        <div>\r\n          <div className='set__title'>Max</div>\r\n          <div className='set__title'>Start</div>\r\n        </div>\r\n        <div className='set__inputs'>\r\n          <div>\r\n            <input className={error} onChange={props.getMaxCounter} value={props.maxCounter} type='number'/>\r\n          </div>\r\n          <div className='set__inputs--input'>\r\n            <input className={error} onChange={props.getStartCounter} value={props.startCounter} type='number'/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='counter-btn set__down'>\r\n        <button disabled={props.setDisable} onClick={props.setStartCounter}>SET</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SetCount;","import {connect} from 'react-redux'\r\nimport SetCount from \"../components/SetCount\";\r\nimport {maxCount, startCount, setDis, setActive} from '../redux/actions/setCounter'\r\nimport {inc, incDis, incActive, resetDis,} from '../redux/actions/counter'\r\nimport React, {Component} from 'react';\r\n\r\nclass SetCountContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.maxValue = 0;\r\n    this.startValue = 0;\r\n    this.error = false;\r\n  }\r\n\r\n  getStartCounter = async (startCount) => {\r\n    this.startValue = Number(startCount.target.value);\r\n    await this.props.startCount(this.startValue);\r\n    this.isDis();\r\n  };\r\n  getMaxCounter = async (maxCount) => {\r\n    this.maxValue = Number(maxCount.target.value);\r\n    await this.props.maxCount(this.maxValue);\r\n    this.isDis();\r\n  };\r\n\r\n  setStartCounter = () => {\r\n    this.props.inc(this.startValue);\r\n    this.isDis();\r\n    this.props.incActive()\r\n  };\r\n\r\n  isDis = async () => {\r\n    if (this.startValue === this.maxValue) {\r\n      this.error = true;\r\n      await this.props.setDis();\r\n      return;\r\n    }\r\n    if (this.props.startCounter === this.startValue && this.props.maxCounter === this.maxValue) {\r\n      this.error = false;\r\n      this.props.setActive();\r\n      this.props.incDis();\r\n      this.props.resetDis();\r\n    } else {\r\n      this.props.setDis();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <SetCount\r\n      getStartCounter={this.getStartCounter}\r\n      getMaxCounter={this.getMaxCounter}\r\n      setStartCounter={this.setStartCounter}\r\n      maxCounter={this.props.maxCounter}\r\n      startCounter={this.props.startCounter}\r\n      setDisable={this.props.setDisable}\r\n      err={this.error}\r\n    />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  maxCounter: state.setCounter.maxCounter,\r\n  startCounter: state.setCounter.startCounter,\r\n  setDisable: state.setCounter.counterSetDisable,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {maxCount, startCount, setDis, setActive, inc, incDis, incActive, resetDis,})\r\n(SetCountContainer)","export const setDis = () => ({type: 'SET_DISABLE'});\r\nexport const setActive = () => ({type: 'SET_ACTIVE'});\r\nexport const maxCount = (maxCount) => ({type: 'MAX_COUNT', payload: maxCount});\r\nexport const startCount = (startCount) => ({type: 'START_COUNT', payload: startCount});","import React from 'react';\nimport '../scss/App.scss';\nimport Counter from \"../containers/Counter\";\nimport SetCount from \"../containers/SetCounter\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app__set-count\">\n        <SetCount />\n      </div>\n      <div className=\"app__counter\">\n        <Counter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n  count: null,\r\n  counterIncDisable: true,\r\n  counterResetDisable: true,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'INC':\r\n      return {\r\n        ...state,\r\n        count: action.payload,\r\n      };\r\n    case 'INC_DISABLE':\r\n      return {\r\n        ...state,\r\n        counterIncDisable: true,\r\n      };\r\n    case 'INC_ACTIVE':\r\n      return {\r\n        ...state,\r\n        counterIncDisable: false,\r\n      };\r\n    case 'RESET_DISABLE':\r\n      return {\r\n        ...state,\r\n        counterResetDisable: true,\r\n      };\r\n    case 'RESET_ACTIVE':\r\n      return {\r\n        ...state,\r\n        counterResetDisable: false,\r\n      };\r\n    case 'RESET':\r\n      return {\r\n        ...state,\r\n        count: action.payload\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}","const initialState = {\r\n  maxCounter: null,\r\n  startCounter: null,\r\n  counterSetDisable: true,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case 'MAX_COUNT':\r\n      return {\r\n        ...state,\r\n        maxCounter: action.payload,\r\n      };\r\n    case 'START_COUNT':\r\n      return {\r\n        ...state,\r\n        startCounter: action.payload,\r\n      };\r\n    case 'SET_ACTIVE':\r\n      return {\r\n        ...state,\r\n        counterSetDisable: false,\r\n      };\r\n    case 'SET_DISABLE':\r\n      return {\r\n        ...state,\r\n        counterSetDisable: true,\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}","import {combineReducers} from 'redux'\r\nimport counter from \"./counter\";\r\nimport setCounter from \"./setCounter\";\r\n\r\nexport default combineReducers({\r\n  counter,\r\n  setCounter\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {Provider} from 'react-redux'\n\nimport createStore from './redux/store'\nconst store = createStore();\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n","import {createStore} from 'redux'\r\n\r\nimport rootReducer from './reducers'\r\n\r\nexport default () => {\r\n  const store = createStore(rootReducer);\r\n  return store;\r\n}"],"sourceRoot":""}